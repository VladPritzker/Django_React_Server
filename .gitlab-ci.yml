stages:
  - build
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  VENV_PATH: "$CI_PROJECT_DIR/djangoenv"

build:
  stage: build
  image: python:3.11-slim
  before_script:
    - apt-get update && apt-get install -y gcc pkg-config libmariadb-dev
    - python3 -m venv $VENV_PATH
    - source $VENV_PATH/bin/activate
    - pip install --upgrade pip
  script:
    - pip install -r requirements.txt
  artifacts:
    paths:
      - djangoenv/
    expire_in: 1 hour
  only:
    - main
    - develop

test:
  stage: test
  image: python:3.11-slim
  services:
    - mysql:8.0
  variables:
    # Ensure Django sees DJANGO_ENV=ci so it uses "if os.getenv('DJANGO_ENV') == 'ci': DB_HOST='mysql'"
    DJANGO_ENV: "ci"

    # Match Django's DB variables exactly:
    DB_NAME: "myproject"
    DB_USER: "myuser"
    DB_PASSWORD: "Test11!!"
    DB_PORT: "3306"
    
    # MySQL container initialization
    MYSQL_ROOT_PASSWORD: "Test11!!"
    # If you want a separate non-root user, you can also define:
    # MYSQL_USER: "myuser"
    # MYSQL_PASSWORD: "Test11!!"
    # MYSQL_DATABASE: "myproject"

  before_script:
    - apt-get update && apt-get install -y gcc libmariadb-dev pkg-config
    - source "$VENV_PATH/bin/activate"
  script:
    # Optional: wait a bit so MySQL container finishes startup
    - echo "Sleeping 10s to let MySQL initialize..."
    - sleep 10

    - python manage.py test
  dependencies:
    - build
  only:
    - main
    - develop
 
deploy:
  stage: deploy
  image: python:3.11-slim
  services:
    - mysql:latest
  variables:
    MYSQL_ROOT_PASSWORD: "Test11!!"
    MYSQL_DATABASE: "myproject"
    DB_NAME: "myproject"
    DB_USER: "root"
    DB_PASSWORD: "Test11!!"
    DB_HOST: "mysql"
    DB_PORT: "3306"
  before_script:
    - apt-get update && apt-get install -y gcc pkg-config libmariadb-dev curl
    - python3 -m venv $VENV_PATH
    - source $VENV_PATH/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Deploying Django application..."
    - python manage.py collectstatic --noinput
    - gunicorn myproject.wsgi:application --config gunicorn.conf.py --log-level debug &
    - sleep 10
    - curl --retry 5 --retry-delay 5 http://127.0.0.1:8080 || (echo "App failed to start"; exit 1)
  dependencies:
    - test
  environment:
    name: production
  only:
    - main
  when: manual